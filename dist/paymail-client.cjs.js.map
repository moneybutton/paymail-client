{"version":3,"file":"paymail-client.cjs.js","sources":["../src/brfc.js","../src/constants.js","../src/dns-over-https.js","../src/dns-client.js","../src/http.js","../src/EndpointResolver.js","../src/VerifiableMessage.js","../src/RequestBodyFactory.js","../src/Clock.js","../src/errors/PaymailNotFound.js","../src/BrowserDns.js","../src/PaymailClient.js"],"sourcesContent":["const bsv = require('bsv');\n\nconst brfc = (title, authors, version) => {\n  const autorString = authors.join(', ').trim();\n  const stringToHash = [title.trim() + autorString + (version.toString() || '')].join('').trim();\n  let hash = bsv.crypto.Hash.sha256sha256(Buffer.from(stringToHash));\n  hash = hash.reverse();\n  return hash.toString('hex').substring(0, 12);\n};\n\nexport { brfc }\n","import { brfc } from './brfc'\n\nexport const CapabilityCodes = {\n  pki: 'pki',\n  paymentDestination: 'paymentDestination',\n  requestSenderValidation: brfc(\n    'bsvalias Payment Addressing (Payer Validation)',\n    [ 'andy (nChain)' ],\n    ''\n  ),\n  verifyPublicKeyOwner: brfc(\n    'bsvalias public key verify (Verify Public Key Owner)',\n    [],\n    ''\n  ),\n  publicProfile: brfc(\n    'Public Profile (Name & Avatar)',\n    [ 'Ryan X. Charles (Money Button)' ],\n    '1'\n  ),\n  receiveTransaction: brfc(\n    'Send raw transaction',\n    [ 'Miguel Duarte (Money Button)', 'Ryan X. Charles (Money Button)', 'Ivan Mlinaric (Handcash)', 'Rafa (Handcash)' ],\n    '1.1'\n  ),\n  p2pPaymentDestination: brfc(\n    'Get no monitored payment destination (p2p payment destination)',\n    [ 'Miguel Duarte (Money Button)', 'Ryan X. Charles (Money Button)', 'Ivan Mlinaric (Handcash)', 'Rafa (Handcash)' ],\n    '1.1'\n  ),\n  witnessPublic: brfc(\n    'Public API of the Controllable UTXO Token Witness',\n    [ 'LI Long (ChainBow)' ],\n    '1'\n  ),\n  witnessCheckBaton: brfc(\n    'Check Baton API of the Controllable UTXO Token Witness',\n    [ 'LI Long (ChainBow)' ],\n    '1'\n  ),\n  witnessCheckToken: brfc(\n    'Check Token API of the Controllable UTXO Token Witness',\n    [ 'LI Long (ChainBow)' ],\n    '1'\n  ),\n  witnessCheckSale: brfc(\n    'Check Sale API of the Controllable UTXO Token Witness',\n    [ 'LI Long (ChainBow)' ],\n    '1'\n  ),//expect: 'c89beec44e80',\n  witnessCheckBuy: brfc(\n    'Check Buy API of the Controllable UTXO Token Witness',\n    [ 'LI Long (ChainBow)' ],\n    '1',\n  ),//expect: '598b080631c4',\n  tokenLogo: brfc(\n    'Logo URI of the Controllable UTXO Token',\n    [ 'LI Long (ChainBow)' ],\n    '1'\n  ),\n  tokenInformation: brfc(\n    'Infomation URI of the Controllable UTXO Token',\n    [ 'LI Long (ChainBow)' ],\n    '1'\n  ),\n}\n","class DnsOverHttps {\n  constructor (fetch, config) {\n    this.fetch = fetch\n    this.config = config\n  }\n\n  async resolveSrv (aDomain) {\n    const response = await this.fetch(`${this.config.baseUrl}?name=${aDomain}&type=SRV&cd=0`)\n    const body = await response.json()\n    return body\n  }\n\n  async queryBsvaliasDomain (aDomain) {\n    return this.resolveSrv(`_bsvalias._tcp.${aDomain}`)\n  }\n}\n\nexport { DnsOverHttps }\n","import { DnsOverHttps } from './dns-over-https'\nimport Promise from 'bluebird';\nclass DnsClient {\n  constructor (dns, fetch) {\n    this.dns = dns\n    this.dohAli = new DnsOverHttps(fetch, { baseUrl: 'https://dns.alidns.com/resolve' })\n    this.dohGoogle = new DnsOverHttps(fetch, { baseUrl: 'https://dns.google.com/resolve' })\n  }\n\n  async checkSrv (aDomain) {\n    return new Promise((resolve, reject) => {\n      this.dns.resolveSrv(`_bsvalias._tcp.${aDomain}`, async (err, result) => {\n        try {\n          if (err && (err.code === 'ENODATA' || err.code === 'ENOTFOUND')) {\n            return resolve({\n              domain: aDomain,\n              port: 443,\n              isSecure: true\n            })\n          }\n          if (err) {\n            return reject(err)\n          }\n\n          const { name: domainFromDns, port, isSecure } = result[0]\n          resolve({\n            domain: domainFromDns,\n            port,\n            isSecure: this.checkDomainIsSecure(domainFromDns, aDomain) || isSecure\n          })\n        } catch (err) {\n          return reject(err)\n        }\n      })\n    }).then(result => {\n      if (result.isSecure) {\n        return result\n      } else {\n        return this.validateDnssec(aDomain)\n      }\n    }, (err) => {\n      console.error(err)\n      return err\n    })\n  }\n\n  checkDomainIsSecure (srvResponseDomain, originalDomain) {\n    if (this.domainsAreEqual(srvResponseDomain, originalDomain)) {\n      return true\n    } else if (this.responseIsWwwSubdomain(srvResponseDomain, originalDomain)) {\n      return true\n    } else if (this.isHandcashDomain(originalDomain)) { // tell rafa to fix handcash and we can remove the special case :)\n      return this.domainsAreEqual('handcash-paymail-production.herokuapp.com', srvResponseDomain) || this.domainsAreEqual('handcash-cloud-production.herokuapp.com', srvResponseDomain)\n    } else if (this.isHandcashInternalDomain(originalDomain)) {\n      return this.domainsAreEqual('handcash-cloud-staging.herokuapp.com', srvResponseDomain)\n    } else if (this.domainsAreEqual('localhost', srvResponseDomain)) {\n      return true\n    } else if (this.isMoneyButtonDomain(srvResponseDomain)) {\n      return true\n    } else {\n      return false\n    }\n  }\n\n  isMoneyButtonDomain (aDomain) {\n    return this.domainsAreEqual(aDomain, 'moneybutton.com') || this.domainsAreEqual(aDomain, 'www.moneybutton.com')\n  }\n\n  responseIsWwwSubdomain (srvResponseDomain, originalDomain) {\n    return this.domainsAreEqual(srvResponseDomain, `www.${originalDomain}`)\n  }\n\n  isHandcashDomain (aDomain) {\n    return this.domainsAreEqual('handcash.io', aDomain)\n  }\n\n  isHandcashInternalDomain (aDomain) {\n    return this.domainsAreEqual('internal.handcash.io', aDomain)\n  }\n\n  async validateDnssec (aDomain) {\n    const dnsResponse = await Promise.any([\n      this.dohAli.queryBsvaliasDomain(aDomain),\n      this.dohGoogle.queryBsvaliasDomain(aDomain)\n    ]) \n    if (dnsResponse.Status !== 0 || !dnsResponse.Answer) {\n      throw new Error('Insecure domain.')\n    }\n    const data = dnsResponse.Answer[0].data.split(' ')\n    const port = data[2]\n    const responseDomain = data[3]\n    if (!dnsResponse.AD && !this.domainsAreEqual(aDomain, responseDomain)) {\n      throw new Error('Insecure domain.')\n    }\n    return {\n      port,\n      domain: responseDomain,\n      isSecure: dnsResponse.AD\n    }\n  }\n\n  domainsAreEqual (domain1, domain2) {\n    return domain1.toLowerCase().replace(/\\.$/, '') === domain2.toLowerCase().replace(/\\.$/, '')\n  }\n}\n\nexport { DnsClient }\n","class Http {\n  constructor ( fetch ) {\n    this.fetch = fetch\n  }\n\n  async get ( url ) {\n    return this._basicRequest( url )\n  }\n\n  async postJson ( url, body ) {\n    return this._basicRequest( url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify( body )\n    } )\n  }\n\n  async _basicRequest ( url, options = {} ) {\n    const timeout = 5000\n    return Promise.race( [\n      this.fetch( url, {\n        ...options,\n        credentials: 'omit',\n      } ),\n      new Promise( ( _, reject ) =>\n        setTimeout( () => reject( new Error( 'timeout' ) ), timeout )\n      )\n    ] );\n  }\n}\n\nexport { Http }\n","import { CapabilityCodes } from './constants'\nimport { DnsClient } from './dns-client'\nimport { Http } from './http'\n\nclass EndpointResolver {\n  constructor (dns = null, fetch) {\n    this.dnsClient = new DnsClient(dns, fetch)\n\n    this.http = new Http(fetch)\n    this._cache = {}\n  }\n\n  static create (dnsClient, fetch) {\n    const instance = new EndpointResolver(null, fetch)\n    instance.dnsClient = dnsClient\n    return instance\n  }\n\n  async getIdentityUrlFor (aPaymail) {\n    const [alias, domain] = aPaymail.split('@')\n    await this.ensureCapabilityFor(domain, CapabilityCodes.pki)\n    const apiDescriptor = await this.getApiDescriptionFor(domain)\n    const identityUrl = apiDescriptor.capabilities.pki\n      .replace('{alias}', alias).replace('{domain.tld}', domain)\n    return identityUrl\n  }\n\n  async getAddressUrlFor (aPaymail) {\n    const [alias, domain] = aPaymail.split('@')\n    await this.ensureCapabilityFor(domain, CapabilityCodes.paymentDestination)\n    const apiDescriptor = await this.getApiDescriptionFor(domain)\n    const addressUrl = apiDescriptor.capabilities.paymentDestination\n      .replace('{alias}', alias).replace('{domain.tld}', domain)\n    return addressUrl\n  }\n\n  async getVerifyUrlFor (aPaymail, aPubkey) {\n    const [alias, domain] = aPaymail.split('@')\n    await this.ensureCapabilityFor(domain, CapabilityCodes.verifyPublicKeyOwner)\n    const apiDescriptor = await this.getApiDescriptionFor(domain)\n    const url = apiDescriptor.capabilities[CapabilityCodes.verifyPublicKeyOwner]\n      .replace('{alias}', alias).replace('{domain.tld}', domain).replace('{pubkey}', aPubkey)\n    return url\n  }\n\n  async getPublicProfileUrlFor (aPaymail) {\n    const [alias, domain] = aPaymail.split('@')\n    await this.ensureCapabilityFor(domain, CapabilityCodes.publicProfile)\n    const apiDescriptor = await this.getApiDescriptionFor(domain)\n    const url = apiDescriptor.capabilities[CapabilityCodes.publicProfile]\n      .replace('{alias}', alias).replace('{domain.tld}', domain)\n    return url\n  }\n\n  async getSendTxUrlFor (aPaymail) {\n    const [alias, domain] = aPaymail.split('@')\n    await this.ensureCapabilityFor(domain, CapabilityCodes.receiveTransaction)\n    const apiDescriptor = await this.getApiDescriptionFor(domain)\n    const url = apiDescriptor.capabilities[CapabilityCodes.receiveTransaction]\n      .replace('{alias}', alias).replace('{domain.tld}', domain)\n    return url\n  }\n\n  async getP2pPatmentDestinationUrlFor (aPaymail) {\n    const [alias, domain] = aPaymail.split('@')\n    await this.ensureCapabilityFor(domain, CapabilityCodes.p2pPaymentDestination)\n    const apiDescriptor = await this.getApiDescriptionFor(domain)\n    const url = apiDescriptor.capabilities[CapabilityCodes.p2pPaymentDestination]\n      .replace('{alias}', alias).replace('{domain.tld}', domain)\n    return url\n  }\n\n  async domainHasCapability (aDomain, capability) {\n    const apiDescriptor = await this.getApiDescriptionFor(aDomain)\n    return !!apiDescriptor.capabilities[capability]\n  }\n\n  async getApiDescriptionFor (aDomain) {\n    if (this._cache[aDomain]) {\n      return this._cache[aDomain]\n    }\n    const { domain, port } = await this.getWellKnownBaseUrl(aDomain)\n    const apiDescriptor = await this.fetchApiDescriptor(domain, port)\n    this._cache[aDomain] = apiDescriptor\n    return apiDescriptor\n  }\n\n  async fetchApiDescriptor (domain, port) {\n    const protocol = (domain === 'localhost' || domain === 'localhost.') ? 'http' : 'https'\n    const requestPort = (port === undefined || port.toString() === '443') ? '' : `:${port}`\n    const requestDomain = /^(.*?)\\.?$/.exec(domain)[1] // Get value from capture group\n    if (!requestDomain) {\n      throw new Error(`Invalid domain: ${domain}`)\n    }\n    const wellKnown = await this.http.get(`${protocol}://${requestDomain}${requestPort}/.well-known/bsvalias`)\n    const apiDescriptor = await wellKnown.json()\n    return apiDescriptor\n  }\n\n  async getWellKnownBaseUrl (aDomain) {\n    return this.dnsClient.checkSrv(aDomain)\n  }\n\n  async ensureCapabilityFor (aDomain, aCapability) {\n    if (!await this.domainHasCapability(aDomain, aCapability)) {\n      throw new Error(`Unknown capability \"${aCapability}\" for \"${aDomain}\"`)\n    }\n  }\n}\n\nexport { EndpointResolver }\n","class VerifiableMessage {\n  constructor (parts, bsv = null) {\n    if (bsv === null) {\n      bsv = require('bsv')\n      bsv.Message = require('bsv/message')\n    }\n    this.bsv = bsv\n    const concatenated = Buffer.from(parts.join(''))\n    this.message = new this.bsv.Message(concatenated)\n  }\n\n  static forBasicAddressResolution ({\n    senderHandle,\n    amount,\n    dt,\n    purpose\n  }) {\n    if (dt && dt.toISOString) {\n      dt = dt.toISOString()\n    }\n\n    return new VerifiableMessage([\n      senderHandle,\n      amount || '0',\n      dt,\n      purpose\n    ])\n  }\n\n  sign (wifPrivateKey) {\n    return this.message.sign(this.bsv.PrivateKey.fromWIF(wifPrivateKey))\n  }\n\n  verify (keyAddress, signature) {\n    return this.message.verify(keyAddress, signature)\n  }\n}\n\nexport { VerifiableMessage }\n","import { VerifiableMessage } from './VerifiableMessage'\n\nclass RequestBodyFactory {\n  constructor (clock) {\n    this.clock = clock\n  }\n\n  buildBodyToRequestAddress (senderInfo, privateKey = null) {\n    const {\n      senderHandle,\n      amount,\n      senderName,\n      purpose,\n      pubkey,\n      signature: providedSignature\n    } = senderInfo\n\n    if (!providedSignature && privateKey === null) {\n      throw new Error('Missing private key or signature')\n    }\n\n    let dt, signature\n    if (providedSignature) {\n      if (!senderInfo.dt) {\n        throw new Error('missing datetime for given signature')\n      }\n      dt = senderInfo.dt\n      signature = providedSignature\n    } else {\n      dt = this.clock.now()\n      signature = VerifiableMessage.forBasicAddressResolution({\n        senderHandle,\n        amount,\n        dt,\n        purpose\n      }).sign(privateKey)\n    }\n\n    return {\n      senderHandle,\n      senderName,\n      purpose,\n      dt,\n      amount: amount || null,\n      pubkey,\n      signature\n    }\n  }\n\n  buildBodySendTx (hexTransaction, reference, metadata) {\n    return { hex: hexTransaction, metadata, reference }\n  }\n\n  buildBodyP2pPaymentDestination (satoshis) {\n    return { satoshis }\n  }\n}\n\nexport { RequestBodyFactory }\n","\nclass Clock {\n  now () {\n    return new Date()\n  }\n}\n\nexport { Clock }\n","class PaymailNotFound extends Error {\n  constructor (message, paymail) {\n    super(message)\n    this.paymail = paymail\n  }\n}\n\nexport { PaymailNotFound }\n","import { DnsOverHttps } from './dns-over-https'\nimport Promise from 'bluebird';\n\nclass BrowserDns {\n  constructor (fetch) {\n    this.dohAli = new DnsOverHttps(fetch, { baseUrl: 'https://dns.alidns.com/resolve' })\n    this.dohGoogle = new DnsOverHttps(fetch, { baseUrl: 'https://dns.google.com/resolve' })\n  }\n\n  async resolveSrv (aDomain, aCallback) {\n    try {\n      const response = await Promise.any([\n        this.dohAli.resolveSrv(aDomain),\n        this.dohGoogle.resolveSrv(aDomain)\n      ])\n\n      if (response.Status === 0 && response.Answer) {\n        const data = response.Answer.map(record => {\n          const [priority, weight, port, name] = record.data.split(' ')\n          return {\n            priority,\n            weight,\n            port,\n            name,\n            isSecure: response.AD\n          }\n        })\n        aCallback(null, data)\n      } else if (!response.Answer) {\n        // ignore check response.Status === 0\n        aCallback({ code: 'ENODATA' })\n      } else {\n        aCallback(new Error('error during dns query'))\n      }\n    } catch (e) {\n      aCallback(e)\n    }\n  }\n}\n\nexport { BrowserDns }\n","import { EndpointResolver } from './EndpointResolver'\nimport { RequestBodyFactory } from './RequestBodyFactory'\nimport { Clock } from './Clock'\nimport { PaymailNotFound } from './errors/PaymailNotFound'\nimport { CapabilityCodes } from './constants'\nimport fetch from 'cross-fetch'\nimport { BrowserDns } from './BrowserDns'\nimport { Http } from './http'\n\nclass PaymailClient {\n  constructor ( dns = null, fetch2 = null, clock = null, bsv = null ) {\n    if ( fetch2 === null ) {\n      fetch2 = fetch\n    }\n    if ( dns === null ) {\n      dns = new BrowserDns( fetch2 )\n    }\n    if ( bsv === null ) {\n      bsv = require( 'bsv' )\n    }\n    this.bsv = bsv\n    this.resolver = new EndpointResolver( dns, fetch2 )\n    this.http = new Http( fetch2 )\n    this.requestBodyFactory = new RequestBodyFactory( clock !== null ? clock : new Clock() )\n  }\n\n  /**\n   * Get witness public.\n   *\n   * @param {String} domain - a domain\n   */\n  async witnessPublic ( domain ) {\n    const apiDescriptor = await this.resolver.getApiDescriptionFor( domain )\n    const url = apiDescriptor.capabilities[ CapabilityCodes.witnessPublic ]\n    const response = await this.http.get( url )\n    return await response.json()\n  }\n\n  /**\n   * witness check baton.\n   *\n   * @param {String} domain - a domain\n   */\n  async witnessCheckBaton ( domain, args ) {\n    const apiDescriptor = await this.resolver.getApiDescriptionFor( domain )\n    const url = apiDescriptor.capabilities[ CapabilityCodes.witnessCheckBaton ]\n    const response = await this.http.get( `${url}?${new URLSearchParams( args )}` )\n    return await response.json()\n  }\n\n  /**\n   * witness check token.\n   *\n   * @param {String} domain - a domain\n   */\n  async witnessCheckToken ( domain, args ) {\n    const apiDescriptor = await this.resolver.getApiDescriptionFor( domain )\n    const url = apiDescriptor.capabilities[ CapabilityCodes.witnessCheckToken ]\n    const response = await this.http.get( `${url}?${new URLSearchParams( args )}` )\n    return await response.json()\n  }\n\n  /**\n * witness check sale contract.\n *\n * @param {String} domain - a domain\n */\n  async witnessCheckSale ( domain, args ) {\n    const apiDescriptor = await this.resolver.getApiDescriptionFor( domain )\n    const url = apiDescriptor.capabilities[ CapabilityCodes.witnessCheckSale ]\n    const response = await this.http.get( `${url}?${new URLSearchParams( args )}` )\n    return await response.json()\n  }\n\n  /**\n* witness check buy contract.\n*\n* @param {String} domain - a domain\n*/\n  async witnessCheckBuy ( domain, args ) {\n    const apiDescriptor = await this.resolver.getApiDescriptionFor( domain )\n    const url = apiDescriptor.capabilities[ CapabilityCodes.witnessCheckBuy ]\n    const response = await this.http.get( `${url}?${new URLSearchParams( args )}` )\n    return await response.json()\n  }\n\n  /**\n   * Get token's logo uri.\n   *\n   * @param {String} domain - a domain\n   * @param {String} contractId - contractId of Token\n   * return uri string\n   */\n  async tokenLogo ( domain, contractId ) {\n    const apiDescriptor = await this.resolver.getApiDescriptionFor( domain )\n    let uri = apiDescriptor.capabilities[ CapabilityCodes.tokenLogo ]\n    uri = uri.replace( '{contractId}', contractId )\n    return { uri }\n  }\n\n  /**\n * Get token's info json.\n *\n * @param {String} domain - a domain\n * @param {String} contractId - contractId of Token\n */\n  async tokenInformation ( domain, contractId ) {\n    const apiDescriptor = await this.resolver.getApiDescriptionFor( domain )\n    let uri = apiDescriptor.capabilities[ CapabilityCodes.tokenInformation ]\n    uri = uri.replace( '{contractId}', contractId )\n    const response = await this.http.get( uri )\n    return await response.json()\n  }\n\n  /**\n   * Uses pki flow to query for an identity key for a given paymail address.\n   *\n   * @param {String} paymail - a paymail address\n   */\n  async getPublicKey ( paymail ) {\n    const identityUrl = await this.resolver.getIdentityUrlFor( paymail )\n    const response = await this.http.get( identityUrl )\n    const { pubkey } = await response.json()\n    return pubkey\n  }\n\n  /**\n   * Uses `Basic Address Resolution` flow to query for a payment for output for the\n   * given paymail address.\n   *\n   * @param {String} aPaymail - a paymail address\n   * @param {Object} senderInfo - Object containing sender info\n   * @param {String} senderInfo.senderHandle - Sender paymail address\n   * @param {String} senderInfo.amount - Optional. Required amount.\n   * @param {String} senderInfo.senderName - Optional. Sender name.\n   * @param {String} senderInfo.purpose - Optional. Purpose of the payment.\n   * @param {String} senderInfo.pubkey - Optional. Public key used to sign the message.\n   * @param {String} senderInfo.signature - Optional. Valid signature according to paymail specification.\n   * @param {String} privateKey - Optional. private key to sign the request.\n   */\n  async getOutputFor ( aPaymail, senderInfo, privateKey = null ) {\n    const addressUrl = await this.resolver.getAddressUrlFor( aPaymail )\n    const response = await this.http.postJson(\n      addressUrl,\n      this.requestBodyFactory.buildBodyToRequestAddress( senderInfo, privateKey )\n    )\n    if ( !response.ok ) {\n      throw new PaymailNotFound( `Paymail not found: ${aPaymail}`, aPaymail )\n    }\n    const { output } = await response.json()\n    return output\n  }\n\n  /**\n   * Verify if the given public address belongs to the given\n   * paymail address.\n   *\n   * @param {String} pubkey - Public key to check.\n   * @param {String} paymail - a paymail address\n   */\n  async verifyPubkeyOwner ( pubkey, paymail ) {\n    const url = await this.resolver.getVerifyUrlFor( paymail, pubkey )\n    const response = await this.http.get( url )\n    const body = await response.json()\n    const { match } = body\n    return match\n  }\n\n  /**\n   * Verifies if a given signature is valid for a given message. It uses\n   * different strategies depending on the capabilities of the server\n   * and the parameters Given. The priority order is.\n   * - If paymail is not provided, then normal signature verification is performed.\n   * - Use provided key (and check that belongs to given paymail address).\n   * - Get a new pubkey for given paymail address using pki.\n   * - If there is no way to intereact with the owner of the domain to verify the public key it returns false.\n   *\n   * @param {Message} message - Message to verify\n   * @param {String} signature - Signature\n   * @param {String} paymail - Signature owner paymail\n   * @param {String} pubkey - Optional. Public key that validates the signature.\n   */\n  async isValidSignature ( message, signature, paymail = null, pubkey = null ) {\n    if ( paymail == null && pubkey === null ) {\n      throw new Error( 'Must specify either paymail or pubkey' )\n    }\n    let senderPublicKey\n    if ( paymail ) {\n      if ( pubkey && await this.resolver.domainHasCapability( paymail.split( '@' )[ 1 ], CapabilityCodes.verifyPublicKeyOwner ) ) {\n        if ( await this.verifyPubkeyOwner( pubkey, paymail ) ) {\n          senderPublicKey = this.bsv.PublicKey.fromString( pubkey )\n        } else {\n          return false\n        }\n      } else {\n        const hasPki = await this.resolver.domainHasCapability( paymail.split( '@' )[ 1 ], CapabilityCodes.pki )\n        if ( hasPki ) {\n          const identityKey = await this.getPublicKey( paymail )\n          senderPublicKey = this.bsv.PublicKey.fromString( identityKey )\n        } else {\n          return false\n        }\n      }\n    }\n\n    const senderKeyAddress = this.bsv.Address.fromPublicKey( senderPublicKey || pubkey )\n    try {\n      const verified = message.verify( senderKeyAddress.toString(), signature )\n      return verified\n    } catch ( err ) {\n      return false\n    }\n  }\n\n  /**\n   * Gets the public profile information using the \"Public Profile\" protocol.\n   *\n   * @param {String} paymail - a paymail address\n   * @param {String} s - the preferred size of the image\n   */\n  async getPublicProfile ( paymail ) {\n    const publicProfileUrl = await this.resolver.getPublicProfileUrlFor( paymail )\n    const response = await this.http.get( publicProfileUrl )\n    if ( !response.ok ) {\n      const body = await response.json()\n      throw new Error( `Server failed with: ${JSON.stringify( body )}` )\n    }\n    const { avatar, name } = await response.json()\n    return { avatar, name }\n  }\n\n  async sendRawTx ( targetPaymail, hexTransaction, reference, metadata = {} ) {\n    if ( !hexTransaction ) {\n      throw new Error( 'transaction hex cannot be empty' )\n    }\n    const receiveTxUrl = await this.resolver.getSendTxUrlFor( targetPaymail )\n    const response = await this.http.postJson(\n      receiveTxUrl,\n      this.requestBodyFactory.buildBodySendTx( hexTransaction, reference, metadata )\n    )\n    if ( !response.ok ) {\n      const body = await response.json()\n      throw new Error( `Server failed with: ${JSON.stringify( body )}` )\n    }\n    return response.json()\n  }\n\n  async getP2pPaymentDestination ( targetPaymail, satoshis ) {\n    if ( !satoshis ) {\n      throw new Error( 'Amount in satohis needs to be specified' )\n    }\n    const paymentDestinationUrl = await this.resolver.getP2pPatmentDestinationUrlFor( targetPaymail )\n    const response = await this.http.postJson(\n      paymentDestinationUrl,\n      this.requestBodyFactory.buildBodyP2pPaymentDestination( satoshis )\n    )\n    if ( !response.ok ) {\n      const body = await response.json()\n      throw new Error( `Server failed with: ${JSON.stringify( body )}` )\n    }\n\n    const body = await response.json()\n    if ( !body.outputs ) {\n      throw new Error( 'Server answered with a wrong format. Missing outputs' )\n    }\n\n    return body\n  }\n}\n\nexport { PaymailClient }\n"],"names":["bsv","require","brfc","title","authors","version","autorString","join","trim","stringToHash","toString","hash","crypto","Hash","sha256sha256","Buffer","from","reverse","substring","CapabilityCodes","pki","paymentDestination","requestSenderValidation","verifyPublicKeyOwner","publicProfile","receiveTransaction","p2pPaymentDestination","witnessPublic","witnessCheckBaton","witnessCheckToken","witnessCheckSale","witnessCheckBuy","tokenLogo","tokenInformation","DnsOverHttps","constructor","fetch","config","resolveSrv","aDomain","response","baseUrl","body","json","queryBsvaliasDomain","DnsClient","dns","dohAli","dohGoogle","checkSrv","Promise","resolve","reject","err","result","code","domain","port","isSecure","name","domainFromDns","checkDomainIsSecure","then","validateDnssec","console","error","srvResponseDomain","originalDomain","domainsAreEqual","responseIsWwwSubdomain","isHandcashDomain","isHandcashInternalDomain","isMoneyButtonDomain","dnsResponse","any","Status","Answer","Error","data","split","responseDomain","AD","domain1","domain2","toLowerCase","replace","Http","get","url","_basicRequest","postJson","method","headers","JSON","stringify","options","timeout","race","credentials","_","setTimeout","EndpointResolver","dnsClient","http","_cache","create","instance","getIdentityUrlFor","aPaymail","alias","ensureCapabilityFor","apiDescriptor","getApiDescriptionFor","identityUrl","capabilities","getAddressUrlFor","addressUrl","getVerifyUrlFor","aPubkey","getPublicProfileUrlFor","getSendTxUrlFor","getP2pPatmentDestinationUrlFor","domainHasCapability","capability","getWellKnownBaseUrl","fetchApiDescriptor","protocol","requestPort","undefined","requestDomain","exec","wellKnown","aCapability","VerifiableMessage","parts","Message","concatenated","message","forBasicAddressResolution","senderHandle","amount","dt","purpose","toISOString","sign","wifPrivateKey","PrivateKey","fromWIF","verify","keyAddress","signature","RequestBodyFactory","clock","buildBodyToRequestAddress","senderInfo","privateKey","senderName","pubkey","providedSignature","now","buildBodySendTx","hexTransaction","reference","metadata","hex","buildBodyP2pPaymentDestination","satoshis","Clock","Date","PaymailNotFound","paymail","BrowserDns","aCallback","map","record","priority","weight","e","PaymailClient","fetch2","resolver","requestBodyFactory","args","URLSearchParams","contractId","uri","getPublicKey","getOutputFor","ok","output","verifyPubkeyOwner","match","isValidSignature","senderPublicKey","PublicKey","fromString","hasPki","identityKey","senderKeyAddress","Address","fromPublicKey","verified","getPublicProfile","publicProfileUrl","avatar","sendRawTx","targetPaymail","receiveTxUrl","getP2pPaymentDestination","paymentDestinationUrl","outputs"],"mappings":"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"}